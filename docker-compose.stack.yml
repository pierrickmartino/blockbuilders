version: '3.9'

services:
  frontend:
    container_name: frontend
    image: frontend:1.0.0
    build:
      context: ./frontend
      dockerfile: next.dockerfile
    ports:
      - 3030:3030
    networks:
      - app_network
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    env_file:
      - ./.env
    depends_on:
      - backend
      - nginx

  backend:
    container_name: backend
    image: backend:1.0.0
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    restart: always
    command: gunicorn blockbuilders.wsgi:application --bind 0.0.0.0:4000
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/mediafiles
    ports:
      - 4000:4000
    networks:
      - app_network
    depends_on:
      - db
      - redis
    env_file:
      - ./.env
  
  db:
    container_name: db
    image: postgres:16
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - 5432:5432
    networks:
      - app_network
    env_file:
      - ./.env
  
  redis:
    image: redis:7
    container_name: redis
    networks:
      - app_network

  celery:
    container_name: celery
    image: celery:1.0.0
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    restart: always
    command: celery -A blockbuilders worker -l info
    networks:
      - app_network
    volumes:
      - .:/code
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - backend
  
  nginx:
    container_name: nginx
    image: nginx:1.0.0
    build:
      context: ./nginx
      dockerfile: nginx.dockerfile
    restart: always
    networks:
      - app_network
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/mediafiles
    depends_on:
      - backend
  
  flower:
    container_name: flower
    image: flower:1.0.0
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    command: celery -A blockbuilders flower
    volumes:
      - .:/code
    ports:
      - 5555:5555
    networks:
      - app_network
    env_file:
      - ./.env
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${REDIS_BACKEND}
    depends_on:
      - backend
      - redis
      - celery

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./backend/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - app_network
    
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - app_network
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
   
networks:
  app_network:
    driver: bridge
    
volumes:
  postgres_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana-data: