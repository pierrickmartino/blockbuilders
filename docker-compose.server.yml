version: '3.9'

services:
  web:
    container_name: web
    build: .
    restart: always
    command: gunicorn blockbuilders.wsgi:application --bind 0.0.0.0:8000
    networks:
      - internal
      - web
    labels:
      - traefik.http.routers.web.rule=Host(`app.blockbuilders.tech`)
      - traefik.http.routers.web.tls=true
      - traefik.http.routers.web.tls.certresolver=lets-encrypt
      - traefik.http.services.web.loadbalancer.server.port=8000
      - traefik.port=80
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/mediafiles
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    env_file:
      - ./.env
  db:
    container_name: db
    image: postgres:16
    restart: always
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - 5433:5432
    env_file:
      - ./.env
  redis:
    container_name: redis
    image: redis:7
    networks:
      - internal
  celery:
    container_name: celery
    build: .
    restart: always
    command: celery -A blockbuilders worker -l info
    networks:
      - internal
    volumes:
      - .:/code
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - web
  flower:
    container_name: flower
    build: .
    command: celery -A blockbuilders flower
    networks:
      - internal
    volumes:
      - .:/code
    ports:
      - 5555:5555
    env_file:
      - ./.env
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${REDIS_BACKEND}
    depends_on:
      - web
      - redis
      - celery
volumes:
  postgres_data:
  static_volume:
  media_volume:
networks:
  internal:
    driver: bridge
  web:
    external: true