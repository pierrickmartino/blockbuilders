version: '3.9'

services:

  frontend:
    container_name: frontend
    image: frontend:1.0.0
    build:
      context: ./frontend
      dockerfile: next.dockerfile
    ports:
      - 3030:3030
    networks:
      - internal
      - web
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    env_file:
      - ./.env
    depends_on:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`app.blockbuilders.tech`)
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.tls.certresolver=lets-encrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3030
      - traefik.port=80

  backend:
    container_name: backend
    image: backend:1.0.0
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    restart: always
    command: gunicorn blockbuilders.wsgi:application --bind 0.0.0.0:4000
    volumes:
      - static_volume:/code/staticfiles
      - media_volume:/code/mediafiles
    ports:
      - 4000:4000
    networks:
      - internal
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`api.blockbuilders.tech`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=lets-encrypt
      - traefik.http.services.backend.loadbalancer.server.port=4000
    depends_on:
      - db
      - redis
    env_file:
      - ./.env

  db:
    container_name: db
    image: postgres:16
    restart: always
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - 5433:5432
    env_file:
      - ./.env

  redis:
    container_name: redis
    image: redis:7
    networks:
      - internal

  celery:
    container_name: celery
    image: celery:1.0.0
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    restart: always
    command: celery -A blockbuilders worker -l info
    networks:
      - internal
    volumes:
      - .:/code
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
      - backend

  flower:
    container_name: flower
    image: flower:1.0.0
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    command: celery -A blockbuilders flower
    volumes:
      - .:/code
    ports:
      - 5555:5555
    networks:
      - internal
      - web
    env_file:
      - ./.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.flower.rule=Host(`flower.blockbuilders.tech`)
      - traefik.http.routers.flower.entrypoints=websecure
      - traefik.http.routers.flower.tls=true
      - traefik.http.routers.flower.tls.certresolver=lets-encrypt
      - traefik.http.services.flower.loadbalancer.server.port=5555
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${REDIS_BACKEND}
    depends_on:
      - backend
      - redis
      - celery  

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./backend/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.blockbuilders.tech`)
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.tls.certresolver=lets-encrypt
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
    ports:
      - 9090:9090
    networks:
      - internal
      - web

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - internal
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.blockbuilders.tech`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=lets-encrypt
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana-data:

networks:
  internal:
    driver: bridge
  web:
    external: true